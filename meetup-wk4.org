#+TITLE: Digital design fundamentals

- Copyright notice :: The notes below are modified copies of the academic module CS-120 "Digital Design": http://www.csd.uoc.gr/~hy120/ copies or posting are not made or distributed for profit or commercial advantage.
#+HTML:&copy University of Crete.
http://www.csd.uoc.gr/~hy120/16f/copyright.html

- [[#basic-logic-components][1. Basic logic components]]
  - [[#spdt-switches][1.1. SPDT switches]]
    - [[#odd-parity][1.1.1. Odd parity]]
    - [[#even-parity][1.1.2. Even parity]]
  - [[#relays][1.2 Relays]]
  - [[#truth-tables-of-logic-gates][1.3. Truth tables of logic gates]]
    - [[#not][1.3.1. NOT]]
    - [[#and][1.3.2. AND]]
    - [[#or][1.3.3. OR]]
    - [[#xor][1.3.4. XOR]]
    - [[#nor][1.3.5. NOR]]
    - [[#][1.3.6. XNOR]]
- [[#combinational-circuits][2. Combinational circuits]]
  - [[#decoder-2to4][2.1. Decoder 2to4]]
  - [[#multiplexer-4to1][2.2. Multiplexer 4to1]]
  - [[#encoding][2.3. Encoding]]
    - [[#seven-segment-display][2.3.1. Seven segment display]]
  - [[#adders][2.4. Adders]]
- [[#2scomplement][3. 2s complement]]
- [[#memory-components][4. Memory components]]
  - [[#latch][4.1. Latch]]
  - [[#register][4.2. Register]]
    - [[#shift-register][4.2.1. Shift register]]
    - [[#master-slave-register][4.2.2. Master-slave register]]
- [[#sequential-circuits][5. Sequential circuits]]
  - [[#counter][5.1. Counter]]
  - [[#finite-state-machine-(fsm)][5.2. Finite state machine (FSM)]]
  - [[#arithmetic-logic-unit-(alu)][5.3. Arithmetic logic unit (ALU)]]



* Basic logic components

** SPDT switches
Switches which have 3 pins (1 input, 2 output).


#+CAPTION: SPDT switch
[[./img/SPDT.png]]

*** Odd Parity

Odd parity is the exclusive OR (XOR).
#+CAPTION: Odd parity
[[./img/ODD-PARITY.png]]

*** Even Parity
Even parity is the equality check.

#+CAPTION: Even parity
[[./img/EVEN-PARITY.png]]



** Relays
Switches which can be used as memory.  The relay below has a DPDT switch (double SPDT) and a coil.  If the coil is activated (pins: 1, 8) the DPDT switch moves from its default state (input pins: 3, 6 to output pins: 2, 7) to the active state (input pins: 3, 6 to output pins: 4, 5).  Relay have been used as basic memory components or mechanical clocks.

#+CAPTION: Relay
[[./img/RELAY.png]]

*** Relay 2-to-4

[[./img/RELAY-2-4.png]]


** Truth tables of logic gates
In principle we need three basic gates to compose every other gate: logical NOT, logical AND, logical OR.

*** NOT
| INPUT | OUTPUT |
|-------+--------|
| A     | NOT A  |
|-------+--------|
| 0     | 1      |
| 1     | 0      |

#+BEGIN_HTML
<p><a href="https://commons.wikimedia.org/wiki/File:Not-gate-en.svg#/media/File:Not-gate-en.svg"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/9f/Not-gate-en.svg/1200px-Not-gate-en.svg.png" alt="Not-gate-en.svg"></a><br><a href="http://creativecommons.org/licenses/by-sa/3.0/" title="Creative Commons Attribution-Share Alike 3.0">CC BY-SA 3.0</a>, <a href="https://commons.wikimedia.org/w/index.php?curid=829068">Link</a></p>
#+END_HTML

*** AND
| INPUT | INPUT |  OUTPUT |
|-------+-------+---------|
|     A |     B | A AND B |
|-------+-------+---------|
|     0 |     0 |       0 |
|     0 |     1 |       0 |
|     1 |     0 |       0 |
|     1 |     1 |       1 |

#+BEGIN_HTML
<p><a href="https://commons.wikimedia.org/wiki/File:AND_ANSI_Labelled.svg#/media/File:AND_ANSI_Labelled.svg"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/b/b9/AND_ANSI_Labelled.svg/1200px-AND_ANSI_Labelled.svg.png" alt="AND ANSI Labelled.svg"></a><br>By <a href="//commons.wikimedia.org/wiki/User:Inductiveload" title="User:Inductiveload">Inductiveload</a> - <span class="int-own-work" lang="en">Own work</span>, Public Domain, <a href="https://commons.wikimedia.org/w/index.php?curid=5729013">Link</a></p>
#+END_HTML

*** OR

| INPUT | INPUT | OUTPUT |
|-------+-------+--------|
|     A |     B | A OR B |
|-------+-------+--------|
|     0 |     0 |      0 |
|     0 |     1 |      1 |
|     1 |     0 |      1 |
|     1 |     1 |      1 |

#+BEGIN_HTML
<p><a href="https://commons.wikimedia.org/wiki/File:OR_ANSI_Labelled.svg#/media/File:OR_ANSI_Labelled.svg"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/OR_ANSI_Labelled.svg/1200px-OR_ANSI_Labelled.svg.png" alt="OR ANSI Labelled.svg"></a><br>By <a href="//commons.wikimedia.org/wiki/User:Inductiveload" title="User:Inductiveload">Inductiveload</a> - <span class="int-own-work" lang="en">Own work</span>, Public Domain, <a href="https://commons.wikimedia.org/w/index.php?curid=5729019">Link</a></p>
#+END_HTML

*** XOR

| INPUT | INPUT |  OUTPUT |
|-------+-------+---------|
|     A |     B | A XOR B |
|-------+-------+---------|
|     0 |     0 |       0 |
|     0 |     1 |       1 |
|     1 |     0 |       1 |
|     1 |     1 |       0 |

#+BEGIN_HTML
<p><a href="https://commons.wikimedia.org/wiki/File:XOR_ANSI.svg#/media/File:XOR_ANSI.svg"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/01/XOR_ANSI.svg/1200px-XOR_ANSI.svg.png" alt="XOR ANSI.svg"></a><br>By jjbeard - Own Drawing, made in Inkscape 0.43, Public Domain, <a href="https://commons.wikimedia.org/w/index.php?curid=830757">Link</a></p>
#+END_HTML
*** NOR

| INPUT | INPUT |  OUTPUT |
|-------+-------+---------|
|     A |     B | A NOR B |
|-------+-------+---------|
|     0 |     0 |       1 |
|     0 |     1 |       0 |
|     1 |     0 |       0 |
|     1 |     1 |       0 |

#+BEGIN_HTML
<p><a href="https://commons.wikimedia.org/wiki/File:NOR_ANSI_Labelled.svg#/media/File:NOR_ANSI_Labelled.svg"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/c/c6/NOR_ANSI_Labelled.svg/1200px-NOR_ANSI_Labelled.svg.png" alt="NOR ANSI Labelled.svg"></a><br>By <a href="//commons.wikimedia.org/wiki/User:Inductiveload" title="User:Inductiveload">Inductiveload</a> - <span class="int-own-work" lang="en">Own work</span>, Public Domain, <a href="https://commons.wikimedia.org/w/index.php?curid=5729017">Link</a></p>
#+END_HTML

*** XNOR
XNOR is the logical equality.

| INPUT | INPUT |  OUTPUT |
|-------+-------+---------|
|     A |     B | A NOR B |
|-------+-------+---------|
|     0 |     0 |       1 |
|     0 |     1 |       0 |
|     1 |     0 |       0 |
|     1 |     1 |       1 |

#+BEGIN_HTML
<p><a href="https://commons.wikimedia.org/wiki/File:Xnor-gate-en.svg#/media/File:Xnor-gate-en.svg"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/3/35/Xnor-gate-en.svg/1200px-Xnor-gate-en.svg.png" alt="Xnor-gate-en.svg"></a><br><a href="http://creativecommons.org/licenses/by-sa/3.0/" title="Creative Commons Attribution-Share Alike 3.0">CC BY-SA 3.0</a>, <a href="https://commons.wikimedia.org/w/index.php?curid=829201">Link</a></p>
#+END_HTML
* Combinational circuits

High level description of combinational circuits.

#+BEGIN_SRC dot :file ./img/combinational-cirsuits.png :cmdline -Kdot -Tpng :exports results
digraph G{

rankdir=LR
node[shape=box]

logic[label="Combinational circuit"]
Inputs -> logic -> Outputs

}
#+END_SRC

#+RESULTS:
[[file:./img/combinational-cirsuits.png]]

** Decoder 2to4

- [[http://www.cburch.com/logisim/][logisim]] file :: [[./src/logisim/decoder_2_to_4.circ]]

[[./img/DECODER-2-4-7408.png]]

** Multiplexer 4to1
Multiplexer 4-to-1 using a decoder 2-to-4.

- [[http://www.cburch.com/logisim/][logisim]] file :: [[./src/logisim/multiplexer_4_to_1.circ]]


[[./img/MUX-4-1.png]]

A multiplexer's module below.
#+BEGIN_HTML
<p><a href="https://commons.wikimedia.org/wiki/File:Multiplexer_4-to-1.svg#/media/File:Multiplexer_4-to-1.svg"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/7/75/Multiplexer_4-to-1.svg/1200px-Multiplexer_4-to-1.svg.png" alt="Multiplexer 4-to-1.svg"></a><br>By <a href="https://en.wikipedia.org/wiki/User:Cburnett" class="extiw" title="en:User:Cburnett">en:User:Cburnett</a> - <span class="int-own-work" lang="en">Own work</span>
<a href="//commons.wikimedia.org/wiki/File:Inkscape_Logo.svg" title="File:Inkscape Logo.svg"></a>
This <a href="https://en.wikipedia.org/wiki/Vector_images" class="extiw" title="w:Vector images">vector image</a> was created with <a href="//commons.wikimedia.org/wiki/Help:Inkscape" title="Help:Inkscape">Inkscape</a>., <a href="http://creativecommons.org/licenses/by-sa/3.0/" title="Creative Commons Attribution-Share Alike 3.0">CC BY-SA 3.0</a>, <a href="https://commons.wikimedia.org/w/index.php?curid=1505578">Link</a></p>
#+END_HTML
** Encoding
*** Seven segment display

#+BEGIN_HTML
<p><a href="https://commons.wikimedia.org/wiki/File:7_segment_display_labeled.svg#/media/File:7_segment_display_labeled.svg"><img src="https://upload.wikimedia.org/wikipedia/commons/thumb/0/02/7_segment_display_labeled.svg/1200px-7_segment_display_labeled.svg.png" alt="7 segment display labeled.svg"></a><br>By <a href="//commons.wikimedia.org/wiki/User:H2g2bob" title="User:H2g2bob">user:h2g2bob</a> - Own work using Inkscape, <a href="http://creativecommons.org/licenses/by-sa/3.0/" title="Creative Commons Attribution-Share Alike 3.0">CC BY-SA 3.0</a>, <a href="https://commons.wikimedia.org/w/index.php?curid=1451959">Link</a></p>
#+END_HTML

**** Combinational circuit and truth table

How to print numbers 0-3 to 7-segment alphanumeric display.

- You need only 2 bits to display numbers 0-3 using binary numbers
- Check which LEDs should be switched on (value = 1, ie. logical TRUE) to display number 0
  - Repeat for all numbers

| In0 | In1 | - | A | B | C | D | E | F | G |
|-----+-----+---+---+---+---+---+---+---+---|
|   0 |   0 |   | 1 | 1 | 1 | 1 | 1 | 1 | 0 |
|   0 |   1 |   | 0 | 1 | 1 | 0 | 0 | 0 | 0 |
|   1 |   0 |   | 1 | 1 | 0 | 1 | 1 | 0 | 1 |
|   1 |   1 |   | 1 | 1 | 1 | 1 | 0 | 0 | 1 |


- How to make the logical functions :: Express using basic logic operations (AND, NOT, OR) the output (7-segments) based on the input (2-bits)

| A = NOT( In0' \cdot In1 ) |
| B = 1                     |
| C = NOT( In0 \cdot In1' ) |
| D = A                     |
| E = In1'                  |
| F = In0' \cdot In1'       |
| G = In0                   |
** Adders
Half-adder and full-adder implementation.

- [[http://www.cburch.com/logisim/][logisim]] file :: [[./src/logisim/half_full_adder.circ]]


[[./img/ADDER.png]]


* 2s complement
The inner circle shows the unsigned numbers (1s complement), the outer (helix) shows the signed numbers (2s complement).

[[./img/2scomplement.png]]

* Memory components
** Latch

Latches are basic module for implementing memory.

- [[http://www.cburch.com/logisim/][logisim]] file :: [[./src/logisim/latches_RS_D.circ]]

[[./img/latches.png]]

** Register
*** Shift register

- [[http://www.cburch.com/logisim/][logisim]] file :: [[./src/logisim/shift_register.circ]]

[[./img/shift-register.png]]

*** Master-slave register

The basic memory component.  Below master-slave register using two latches RS, activated by positive edge clock.


- [[http://www.cburch.com/logisim/][logisim]] file :: [[./src/logisim/master_slave_register.circ]]


[[./img/master-slave.png]]


* Sequential circuits

High level description of sequential circuits.

#+BEGIN_SRC ditaa :file ./img/sequential-cirsuits.png :exports results
                  +---------------+
          Inputs  |               |  Outputs
        --------->|               |----------->
                  |               |
   +---+          | Combinational |
   |   |          |    circuit    |
   |   |  State   |               |
+->|   |--------->|               |-----+
|  |   |          |               |     |
|  |   |          |               |     |
|  +-+-+          +---------------+     |
|    |                                  |
|            next State                 |
+---------------------------------------+
#+END_SRC

#+RESULTS:
[[file:./img/sequential-cirsuits.png]]

** Counter

A 3 bit counter.

- [[http://www.cburch.com/logisim/][logisim]] file :: [[./src/logisim/3_bit_counter.circ]]

[[./img/3bit-counter.png]]

** Finite state machine (FSM)

FSM for adaptive control of traffic lights.  A and B are cars on a crossroad.

#+BEGIN_SRC ditaa :file ./img/cars.png :exports results
-----------------------------------------
                    AAAA
-----------------------+   +-------------
                       | B |
                       | B |
                       |   |
                       |   |
                       |   |
                       |   |
                       |   |
#+END_SRC

#+RESULTS:
[[file:./img/cars.png]]

- [[http://www.cburch.com/logisim/][logisim]] file :: [[./src/logisim/analogy_1_to_1.circ]]

#+BEGIN_SRC dot :file ./img/fsm-1-1.png :cmdline -Kdot -Tpng :exports none
  digraph {

  rankdir=LR
  forcelabels=true;

  s1[label="last\nwas A"]
  s2[label="last\nwas B"]

  s1:e -> s2:nw[label="Bd=>Bgo"]
  s2 -> s1[label="Ago<=Ad"]

  s1:n -> s1:nw[label="(Bd')(Ad)\n=>Ago"]
  s1:s -> s1:sw[label="(Bd')(Ad')"]

  s2:e -> s2:ne[label="(Ad')(Bd')"]
  s2:s -> s2:sw[label="(Ad')(Bd)\n=>Bgo"]

  }
#+END_SRC

#+RESULTS:
[[file:./img/fsm-1-1.png]]

#+CAPTION: One-by-one analogy for traffic control
[[file:./img/fsm-1-1.png]]

| S | Ad | Bd |   |   | Ago | Bgo | nS |
|---+----+----+---+---+-----+-----+----|
| 0 |  0 |  0 |   |   |   0 |   0 |  0 |
| 0 |  0 |  1 |   |   |   0 |   1 |  1 |
| 0 |  1 |  0 |   |   |   1 |   0 |  0 |
| 0 |  1 |  1 |   |   |   0 |   1 |  1 |
| 1 |  0 |  0 |   |   |   0 |   0 |  1 |
| 1 |  0 |  1 |   |   |   0 |   1 |  1 |
| 1 |  1 |  0 |   |   |   1 |   0 |  0 |
| 1 |  1 |  1 |   |   |   1 |   0 |  0 |

- Ago = Ad · [ S + (S')·(Bd') ]
- Bgo = Bd · [ S' + (S)·(Ad') ]
- nS  =  S · Ad'  +  S' · Bd

** Arithmetic Logic Unit (ALU)

A basic component which can do multiple functions, like addition, subtraction, logical AND etc.

- [[http://www.cburch.com/logisim/][logisim]] file :: [[./src/logisim/ALU.circ]]

[[./img/ALU.png]]

| mode: |        |   |              |         |
|   000 | ALUout |   | A+B          | (add)   |
|   001 | ALUout |   | A-B          | (sub)   |
|   010 | ALUout |   | A AND B      | (and)   |
|   011 | ALUout |   | NOT (A OR B) | (nor)   |
|   1xx | ALUout |   | B            | (passB) |
